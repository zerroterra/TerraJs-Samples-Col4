import { JSONSerializable } from '../../../util/json';
import { AccAddress } from '../../bech32';
import { Coins } from '../../Coins';
export declare class MsgInstantiateContract extends JSONSerializable<MsgInstantiateContract.Data> {
    sender: AccAddress;
    admin: AccAddress | undefined;
    code_id: number;
    init_msg: object;
    init_coins: Coins;
    /**
     * @param sender is a sender address
     * @param admin is an optional contract admin address who can migrate the contract, put empty string to disable migration
     * @param code_id is the reference to the stored WASM code
     * @param init_msg json encoded message to be passed to the contract on instantiation
     * @param init_coins are transferred to the contract on execution
     */
    constructor(sender: AccAddress, admin: AccAddress | undefined, code_id: number, init_msg: object, init_coins?: Coins.Input);
    static fromData(data: MsgInstantiateContract.Data): MsgInstantiateContract;
    toData(): MsgInstantiateContract.Data;
}
export declare namespace MsgInstantiateContract {
    interface Data {
        type: 'wasm/MsgInstantiateContract';
        value: {
            sender: AccAddress;
            admin?: AccAddress;
            code_id: string;
            init_msg: object;
            init_coins: Coins.Data;
        };
    }
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureV2 = void 0;
var PublicKey_1 = require("./PublicKey");
var Tx_1 = require("./Tx");
var signing_1 = require("@terra-money/terra.proto/cosmos/tx/signing/v1beta1/signing");
var SignatureV2 = /** @class */ (function () {
    function SignatureV2(public_key, data, sequence) {
        this.public_key = public_key;
        this.data = data;
        this.sequence = sequence;
    }
    SignatureV2.fromData = function (data) {
        return new SignatureV2(PublicKey_1.PublicKey.fromData(data.public_key), SignatureV2.Descriptor.fromData(data.data), Number.parseInt(data.sequence));
    };
    SignatureV2.fromAmino = function (data) {
        return new SignatureV2(PublicKey_1.PublicKey.fromAmino(data.pub_key), new SignatureV2.Descriptor(new SignatureV2.Descriptor.Single(signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON, data.signature)), 0);
    };
    return SignatureV2;
}());
exports.SignatureV2 = SignatureV2;
(function (SignatureV2) {
    var Descriptor = /** @class */ (function () {
        function Descriptor(single, multi) {
            this.single = single;
            this.multi = multi;
        }
        Descriptor.fromData = function (data) {
            if (data.single) {
                return new Descriptor(Descriptor.Single.fromData(data.single));
            }
            if (data.multi) {
                return new Descriptor(undefined, Descriptor.Multi.fromData(data.multi));
            }
            throw new Error('must be one of single or multi');
        };
        return Descriptor;
    }());
    SignatureV2.Descriptor = Descriptor;
    (function (Descriptor) {
        var Single = /** @class */ (function () {
            function Single(mode, signature) {
                this.mode = mode;
                this.signature = signature;
            }
            Single.fromData = function (data) {
                return new Single(signing_1.signModeFromJSON(data.mode), data.signature);
            };
            return Single;
        }());
        Descriptor.Single = Single;
        var Multi = /** @class */ (function () {
            function Multi(bitarray, signatures) {
                this.bitarray = bitarray;
                this.signatures = signatures;
            }
            Multi.fromData = function (data) {
                return new Multi(Tx_1.CompactBitArray.fromData(data.bitarray), data.signatures.map(function (v) { return Descriptor.fromData(v); }));
            };
            return Multi;
        }());
        Descriptor.Multi = Multi;
    })(Descriptor = SignatureV2.Descriptor || (SignatureV2.Descriptor = {}));
})(SignatureV2 = exports.SignatureV2 || (exports.SignatureV2 = {}));
exports.SignatureV2 = SignatureV2;
//# sourceMappingURL=SignatureV2.js.map
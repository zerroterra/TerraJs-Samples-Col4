"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vote = void 0;
var json_1 = require("../../util/json");
/**
 * Stores vote information for a proposal
 */
var Vote = /** @class */ (function (_super) {
    __extends(Vote, _super);
    /**
     * @param proposal_id ID of proposal to vote on
     * @param voter voter's account address
     * @param option one of voting options
     */
    function Vote(proposal_id, voter, options, option // undefined except proposals in voting status
    ) {
        var _this = _super.call(this) || this;
        _this.proposal_id = proposal_id;
        _this.voter = voter;
        _this.options = options;
        _this.option = option;
        return _this;
    }
    Vote.fromData = function (data) {
        var proposal_id = data.proposal_id, voter = data.voter, options = data.options, option = data.option;
        return new Vote(Number.parseInt(proposal_id), voter, options, option);
    };
    Vote.prototype.toData = function () {
        var _a = this, proposal_id = _a.proposal_id, voter = _a.voter, options = _a.options, option = _a.option;
        var res = {
            proposal_id: proposal_id.toFixed(),
            voter: voter,
            options: options,
        };
        if (option) {
            res.option = option;
        }
        return res;
    };
    return Vote;
}(json_1.JSONSerializable));
exports.Vote = Vote;
(function (Vote) {
    /** Voting options */
    var Option;
    (function (Option) {
        /** - */
        Option[Option["EMPTY"] = 0] = "EMPTY";
        /** Vote yes */
        Option[Option["YES"] = 1] = "YES";
        /** Do not vote */
        Option[Option["ABSTAIN"] = 2] = "ABSTAIN";
        /** Vote no */
        Option[Option["NO"] = 3] = "NO";
        /** Vote No with the option to veto if passed */
        Option[Option["NO_WITH_VETO"] = 4] = "NO_WITH_VETO";
    })(Option = Vote.Option || (Vote.Option = {}));
})(Vote = exports.Vote || (exports.Vote = {}));
exports.Vote = Vote;
//# sourceMappingURL=Vote.js.map
import { JSONSerializable } from '../../util/json';
import { AccAddress } from '../bech32';
/**
 * Stores vote information for a proposal
 */
export declare class Vote extends JSONSerializable<Vote.Data> {
    proposal_id: number;
    voter: AccAddress;
    options: Vote.Options;
    option?: Vote.Option | undefined;
    /**
     * @param proposal_id ID of proposal to vote on
     * @param voter voter's account address
     * @param option one of voting options
     */
    constructor(proposal_id: number, voter: AccAddress, options: Vote.Options, option?: Vote.Option | undefined);
    static fromData(data: Vote.Data): Vote;
    toData(): Vote.Data;
}
export declare namespace Vote {
    type Options = {
        option: Option;
        weight: string;
    }[];
    /** Voting options */
    enum Option {
        /** - */
        EMPTY = 0,
        /** Vote yes */
        YES = 1,
        /** Do not vote */
        ABSTAIN = 2,
        /** Vote no */
        NO = 3,
        /** Vote No with the option to veto if passed */
        NO_WITH_VETO = 4
    }
    interface Data {
        proposal_id: string;
        voter: AccAddress;
        option?: Option;
        options: {
            option: Option;
            weight: string;
        }[];
    }
}
